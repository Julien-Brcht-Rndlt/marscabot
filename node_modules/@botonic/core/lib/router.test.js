"use strict";

var _errors = require("./errors");

var _index = require("./index");

var _router = require("./router");

/** @type Input */
var textInput = {
  type: 'text',
  data: 'hi'
};
/** @type Input */

var textInputComplex = {
  type: 'text',
  data: 'CÃ¶mplÃªx input &% ðŸš€'
};
/** @type Input */

var textPayloadInput = {
  type: 'text',
  data: 'hi',
  payload: 'foo'
};
/** @type Input */

var postbackInput = {
  type: 'postback',
  payload: 'foo'
};
var requestInput = {
  input: textInput,
  session: {
    organization: 'myOrg'
  },
  lastRoutePath: 'initial'
};
/**
 * @return {Route}
 */

function testRoute() {
  return {};
}
/**
 * @return {Session}
 */


function testSession() {
  return {
    user: {
      id: 'userid',
      provider: _index.PROVIDER.DEV
    },
    bot: {
      id: 'bot_id'
    },
    is_first_interaction: true
  };
}

describe('Bad router initialization', function () {
  test('empty routes throw TypeError', function () {
    var router = new _router.Router([]);
    expect(function () {
      return router.processInput(textInput, testSession());
    }).toThrow(_errors.NoMatchingRouteError);
  });
  test('null routes throw TypeError', function () {
    // @ts-ignore
    var router = new _router.Router();
    expect(function () {
      return router.processInput(textInput, testSession());
    }).toThrow(TypeError);
  });
});
test('Router returns 404', function () {
  var router = new _router.Router([{
    path: '404',
    action: '404Action'
  }]);

  var _router$processInput = router.processInput(textInput, testSession()),
      action = _router$processInput.action;

  expect(action).toBe('404Action');
});
describe('Match route by MATCHER <> INPUT', function () {
  var router = new _router.Router([]);

  var matchTextProp = function matchTextProp(matcher, textInput) {
    return router.matchRoute(testRoute(), 'text', matcher, textInput, testSession());
  };

  var matchPayloadProp = function matchPayloadProp(matcher, payload) {
    return router.matchRoute(testRoute(), 'payload', matcher, payload, testSession());
  };

  var matchRequestProp = function matchRequestProp(matcher, request) {
    return router.matchRoute(testRoute(), 'request', matcher, request.input, request.session, request.lastRoutePath);
  };

  test('text <> text', function () {
    expect(matchTextProp('hi', textInput)).toBeTruthy();
    expect(matchTextProp('hii', textInput)).toBeFalsy();
    expect(matchTextProp('bye', textInput)).toBeFalsy();
    expect(matchTextProp('', textInput)).toBeFalsy();
    expect(matchTextProp(null, textInput)).toBeFalsy();
    expect(matchTextProp('CÃ¶mplÃªx input &% ðŸš€', textInputComplex)).toBeTruthy();
    expect(matchTextProp(' CÃ¶mplÃªx input &% ðŸš€', textInputComplex)).toBeFalsy(); // has a space at the beginning
  });
  test('regex <> text', function () {
    expect(matchTextProp(/hi/, textInput)).toBeTruthy();
    expect(matchTextProp(/bye/, textInput)).toBeFalsy();
    expect(matchTextProp(/ðŸš€/, textInputComplex)).toBeTruthy();
    expect(matchTextProp(/complex/, textInputComplex)).toBeFalsy();
  });
  test('function <> text', function () {
    expect(matchTextProp(function (v) {
      return v.startsWith('hi');
    }, textInput)).toBeTruthy();
    expect(matchTextProp(function (v) {
      return !v.startsWith('hi');
    }, textInput)).toBeFalsy();
  });
  test('input <> text', function () {
    expect(router.matchRoute(testRoute(), 'input', function (i) {
      return i.data.startsWith('hi');
    }, textInput, testSession())).toBeTruthy();
    expect(router.matchRoute(testRoute(), 'input', function (i) {
      return !i.data.startsWith('hi');
    }, textInput, testSession())).toBeFalsy();
  });
  test('text <> text payload', function () {
    expect(matchPayloadProp('foo', textPayloadInput)).toBeTruthy();
    expect(matchPayloadProp('fooo', textPayloadInput)).toBeFalsy();
    expect(matchPayloadProp('bar', textPayloadInput)).toBeFalsy();
    expect(matchPayloadProp('', textPayloadInput)).toBeFalsy();
    expect(matchPayloadProp(null, textPayloadInput)).toBeFalsy();
  });
  test('regex <> text payload', function () {
    expect(matchPayloadProp(/foo/, textPayloadInput)).toBeTruthy();
    expect(matchPayloadProp(/bar/, textPayloadInput)).toBeFalsy();
  });
  test('function <> text payload', function () {
    expect(matchPayloadProp(function (v) {
      return v.startsWith('fo');
    }, textPayloadInput)).toBeTruthy();
    expect(matchPayloadProp(function (v) {
      return !v.startsWith('fo');
    }, textPayloadInput)).toBeFalsy();
  });
  test('text <> postback', function () {
    expect(matchPayloadProp('foo', postbackInput)).toBeTruthy();
    expect(matchPayloadProp('fooo', postbackInput)).toBeFalsy();
    expect(matchPayloadProp('bar', postbackInput)).toBeFalsy();
    expect(matchPayloadProp('', postbackInput)).toBeFalsy();
    expect(matchPayloadProp(null, postbackInput)).toBeFalsy();
  });
  test('regex <> postback', function () {
    expect(matchPayloadProp(/foo/, postbackInput)).toBeTruthy();
    expect(matchPayloadProp(/bar/, postbackInput)).toBeFalsy();
  });
  test('function <> postback', function () {
    expect(matchPayloadProp(function (v) {
      return v.startsWith('fo');
    }, postbackInput)).toBeTruthy();
    expect(matchPayloadProp(function (v) {
      return !v.startsWith('fo');
    }, postbackInput)).toBeFalsy();
  });
  test('function <> request', function () {
    expect(matchRequestProp(function (request) {
      return request.input.data === 'hi' && request.session.organization === 'myOrg' && request.lastRoutePath === 'initial';
    }, requestInput)).toBeTruthy();
    expect(matchRequestProp(function (request) {
      return request.input.data === 'hello' && request.session.organization === 'myOrg' && request.lastRoutePath === 'initial';
    }, requestInput)).toBeFalsy();
  });
});
describe('Get route by path', function () {
  var externalRoutes = [{
    path: '',
    action: 'DefaultAction'
  }, {
    path: 'child',
    action: 'ChildAction'
  }];
  var router = new _router.Router([{
    path: 'initial',
    action: 'Initial'
  }, {
    path: 'flow-1',
    action: 'Flow1',
    childRoutes: [{
      path: '1',
      action: 'Flow1.1',
      childRoutes: [{
        path: '1',
        action: 'Flow1.1.1'
      }, {
        path: '2',
        action: 'Flow1.1.2'
      }, {
        path: '3',
        action: 'Flow1.1.3'
      }]
    }, {
      path: '2',
      action: 'Flow1.2',
      childRoutes: externalRoutes
    }, {
      path: '3',
      action: 'Flow1.3',
      childRoutes: [{
        path: '1',
        action: 'Flow1.3.1'
      }, {
        path: '2',
        action: 'Flow1.3.2'
      }, {
        path: '3',
        action: 'Flow1.3.3'
      }]
    }]
  }, {
    path: '404',
    action: '404Action'
  }]);

  function getRouteActionByPath(path) {
    // @ts-ignore
    return router.getRouteByPath(path).action;
  }

  test('path exists', function () {
    expect(getRouteActionByPath('initial')).toBe('Initial');
    expect(getRouteActionByPath('flow-1/1')).toBe('Flow1.1');
    expect(getRouteActionByPath('flow-1/3/2')).toBe('Flow1.3.2');
  });
  test('path exists in composed child routes', function () {
    expect(getRouteActionByPath('flow-1/2')).toBe('Flow1.2');
    expect(getRouteActionByPath('flow-1/2/child')).toBe('ChildAction');
  });
  test('path does not exist', function () {
    expect(router.getRouteByPath('')).toBeNull();
    expect(router.getRouteByPath('foo')).toBeNull();
    expect(router.getRouteByPath('flow-1/3/2/6')).toBeNull();
  });
});
describe('Process input (v<0.9)', function () {
  var externalRoutes = [{
    path: '',
    action: 'DefaultAction'
  }, {
    path: 'child',
    action: 'ChildAction'
  }];
  var router = new _router.Router([{
    path: 'help',
    payload: 'help',
    action: 'Help'
  }, {
    path: 'initial',
    intent: /greeting/,
    action: 'Flow1',
    childRoutes: [{
      path: '1',
      payload: '1',
      action: 'Flow1.1',
      childRoutes: [{
        path: '1',
        payload: '1',
        action: 'Flow1.1.1'
      }, {
        path: '2',
        payload: '2',
        action: 'Flow1.1.2'
      }, {
        path: '3',
        payload: '3',
        action: 'Flow1.1.3'
      }]
    }, {
      path: '2',
      payload: '2',
      action: 'Flow1.2',
      childRoutes: externalRoutes
    }, {
      path: '3',
      payload: '3',
      action: 'Flow1.3',
      childRoutes: [{
        path: '1',
        payload: '1',
        action: 'Flow1.3.1'
      }, {
        path: '2',
        payload: '2',
        action: 'Flow1.3.2'
      }, {
        path: '3',
        payload: '3',
        action: 'Flow1.3.3'
      }]
    }]
  }, {
    path: '404',
    action: '404Action'
  }]);
  test('text input, root level route', function () {
    /** @type Input */
    var input = {
      type: 'text',
      data: 'hi',
      intent: 'greeting'
    };
    var lastRoutePath = null;
    expect(router.processInput(input, testSession(), lastRoutePath).action).toBe('Flow1');
  });
  test('payload input, 2nd level route', function () {
    /** @type Input */
    var input = {
      type: 'postback',
      payload: '2'
    };
    var lastRoutePath = 'initial';
    expect(router.processInput(input, testSession(), lastRoutePath).action).toBe('Flow1.2');
  });
  test('old protocol:path payload input, root level route', function () {
    /** @type Input */
    var input = {
      type: 'postback',
      payload: '__PATH_PAYLOAD__initial'
    };
    var lastRoutePath = '';
    expect(router.processInput(input, testSession(), lastRoutePath).action).toBe('Flow1');
  });
  test('old protocol:path payload input, root level route with composed path', function () {
    /** @type Input */
    var input = {
      type: 'postback',
      path: 'initial/2'
    };
    var lastRoutePath = '';
    expect(router.processInput(input, testSession(), lastRoutePath).action).toBe('Flow1.2');
  });
  test('old protocol: path payload input, 2nd level route with lastRoutePath', function () {
    /** @type Input */
    var input = {
      type: 'postback',
      payload: '__PATH_PAYLOAD__2'
    };
    var lastRoutePath = 'initial';
    expect(router.processInput(input, testSession(), lastRoutePath).action).toBe('Flow1.2');
  });
  test('path payload input with deprecated protocol, root level route', function () {
    /** @type Input */
    var input = {
      type: 'postback',
      payload: '__PATH_PAYLOAD__initial/2'
    };
    var lastRoutePath = '';
    expect(router.processInput(input, testSession(), lastRoutePath).action).toBe('Flow1.2');
  });
  test('old protocol:path payload input with deprecated protocol, 2nd level route', function () {
    /** @type Input */
    var input = {
      type: 'postback',
      payload: '__PATH_PAYLOAD__initial/2'
    };
    var lastRoutePath = 'initial';
    expect(router.processInput(input, testSession(), lastRoutePath).action).toBe('Flow1.2');
  });
});
test.each([[undefined, undefined, undefined], ['', undefined, undefined], ['bad_input', undefined, undefined], ['__PATH_PAYLOAD__', '', undefined], ['xx__PATH_PAYLOAD__path1', 'path1', undefined], ['xx__PATH_PAYLOAD__path1?path1', 'path1', 'path1']])('getOnFinishParams(%s)=>%s', function (inputPayload, expectedPath, expectedParams) {
  var router = new _router.Router([]);
  /** @type Input */

  var input = {
    type: 'postback',
    payload: inputPayload
  };
  expect(router.getOnFinishParams(input)).toEqual(expectedParams);
  expect(input.path).toEqual(expectedPath);

  if (input.path) {
    expect(input.payload).toBeUndefined();
  }
});
//# sourceMappingURL=router.test.js.map