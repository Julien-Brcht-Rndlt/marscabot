"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWebpackEnvVar = getWebpackEnvVar;
exports.isFunction = isFunction;
exports.dirname = exports.join = exports.params2queryString = exports.isMobile = exports.isBrowser = exports.isNode = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var isNode = function isNode() {
  return typeof IS_NODE !== 'undefined' ? // eslint-disable-next-line no-undef
  IS_NODE : typeof process !== 'undefined' && process.versions !== null && process.versions.node !== null;
};

exports.isNode = isNode;

var isBrowser = function isBrowser() {
  return typeof IS_BROWSER !== 'undefined' ? // eslint-disable-next-line no-undef
  IS_BROWSER : typeof window !== 'undefined' && typeof window.document !== 'undefined' && !window.process;
};

exports.isBrowser = isBrowser;

function getWebpackEnvVar(webpackEnvVar, name, defaultValue) {
  return webpackEnvVar || typeof process !== 'undefined' && process.env[name] || defaultValue;
}

var isMobile = function isMobile() {
  var mobileBreakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 460;

  if (isBrowser()) {
    var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

    if (w < mobileBreakpoint) {
      return true;
    }
  }

  return false;
};

exports.isMobile = isMobile;

function isFunction(o) {
  return typeof o === 'function';
}

var params2queryString = function params2queryString(params) {
  return Object.entries(params).map(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        k = _ref2[0],
        v = _ref2[1];

    return "".concat(encodeURIComponent(k), "=").concat(encodeURIComponent(v));
  }).join('&');
}; // Joins path segments.  Preserves initial "/" and resolves ".." and "."
// Does not support using ".." to go above/outside the root.
// This means that join("foo", "../../bar") will not resolve to "../bar"


exports.params2queryString = params2queryString;

var join = function join() {
  // Split the inputs into a list of path commands.
  var parts = [];

  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {
    segments[_key] = arguments[_key];
  }

  for (var i = 0, l = segments.length; i < l; i++) {
    parts = parts.concat(segments[i].split('/'));
  } // Interpret the path commands to get the new resolved path.


  var newParts = [];

  for (var _i = 0, _l = parts.length; _i < _l; _i++) {
    var part = parts[_i]; // Remove leading and trailing slashes
    // Also remove "." segments

    if (!part || part === '.') continue; // Interpret ".." to pop the last segment

    if (part === '..') newParts.pop(); // Push new path segments.
    else newParts.push(part);
  } // Preserve the initial slash if there was one.


  if (parts[0] === '') newParts.unshift(''); // Turn back into a single string path.

  return newParts.join('/') || (newParts.length ? '/' : '.');
}; // A simple function to get the dirname of a path
// Trailing slashes are ignored. Leading slash is preserved.


exports.join = join;

var dirname = function dirname(path) {
  return join(path, '..');
};

exports.dirname = dirname;
//# sourceMappingURL=utils.js.map