{"version":3,"sources":["../src/handoff.test.js"],"names":["describe","test","each","payload","path","expected","queue","onFinish","session","expect","_botonic_action","toEqual","replace","JSON","stringify","agent_email","case_info","note","on_finish","HandOffBuilder","withQueue","withOnFinishPayload","withAgentEmail","withCaseInfo","withNote","withOnFinishPath","agent_id","withAgentId","builder","handOff","_session"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,SAAD,EAAY,YAAM;AACxBC,EAAAA,IAAI,CAACC,IAAL,CAAU,CACR,2FAKE,IALF,EAME;AAAEC,IAAAA,OAAO,EAAE;AAAX,GANF,CADQ,EASR,6EAIE,EAJF,EAKE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GALF,CATQ,CAAV,EAgBG,cAhBH,EAgBmB,UAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,EAA+B;AAChD,QAAMC,OAAO,GAAG,EAAhB;AACA,+BAAaA,OAAb,EAAsBF,KAAtB,EAA6BC,QAA7B;AACAE,IAAAA,MAAM,CAACD,OAAO,CAACE,eAAT,CAAN,CAAgCC,OAAhC,CAAwCN,QAAQ,CAACO,OAAT,CAAiB,QAAjB,EAA2B,EAA3B,CAAxC;AACD,GApBD;AAsBAX,EAAAA,IAAI,CAACC,IAAL,CAAU,CACR,CACE,iBACEW,IAAI,CAACC,SAAL,CAAe;AACbR,IAAAA,KAAK,EAAE,IADM;AAEbS,IAAAA,WAAW,EAAE,QAFA;AAGbC,IAAAA,SAAS,EAAE,yBAHE;AAIbC,IAAAA,IAAI,EAAE,0BAJO;AAKbC,IAAAA,SAAS,EAAE;AALE,GAAf,CAFJ,EASE,IAAIC,uBAAJ,CAAmB,EAAnB,EACGC,SADH,CACa,IADb,EAEGC,mBAFH,CAEuB,UAFvB,EAGGC,cAHH,CAGkB,QAHlB,EAIGC,YAJH,CAIgB,yBAJhB,EAKGC,QALH,CAKY,0BALZ,CATF,CADQ,EAiBR,CACE,iBACEX,IAAI,CAACC,SAAL,CAAe;AACbI,IAAAA,SAAS,EAAE;AADE,GAAf,CAFJ,EAKE,IAAIC,uBAAJ,CAAmB,EAAnB,EAAuBM,gBAAvB,CAAwC,OAAxC,CALF,CAjBQ,EAwBR,CACE,iBACEZ,IAAI,CAACC,SAAL,CAAe;AACbY,IAAAA,QAAQ,EAAE;AADG,GAAf,CAFJ,EAKE,IAAIP,uBAAJ,CAAmB,EAAnB,EAAuBQ,WAAvB,CAAmC,MAAnC,CALF,CAxBQ,CAAV,EA+BG,gBA/BH,EA+BqB,UAACtB,QAAD,EAAWuB,OAAX,EAAuB;AAC1CA,IAAAA,OAAO,CAACC,OAAR;AACApB,IAAAA,MAAM,CAACmB,OAAO,CAACE,QAAR,CAAiBpB,eAAlB,CAAN,CAAyCC,OAAzC,CAAiDN,QAAjD;AACD,GAlCD;AAmCD,CA1DO,CAAR","sourcesContent":["import { HandOffBuilder, humanHandOff } from './handoff'\n\ndescribe('handOff', () => {\n  test.each([\n    [\n      `create_case:{\n        \"queue\":\"q1\",\n        \"on_finish\":\"payload1\"\n       }`,\n      'q1',\n      { payload: 'payload1' },\n    ],\n    [\n      `create_case:{\n        \"on_finish\":\"__PATH_PAYLOAD__path1\"\n       }`,\n      '',\n      { path: 'path1' },\n    ],\n  ])('humanHandOff', (expected, queue, onFinish) => {\n    const session = {}\n    humanHandOff(session, queue, onFinish)\n    expect(session._botonic_action).toEqual(expected.replace(/[ \\n]/g, ''))\n  })\n\n  test.each([\n    [\n      `create_case:` +\n        JSON.stringify({\n          queue: 'q1',\n          agent_email: 'email1',\n          case_info: '{}{:::: m\"ho menjo tot}',\n          note: '{}{:::: m\"ho menjo tot2}',\n          on_finish: 'payload1',\n        }),\n      new HandOffBuilder({})\n        .withQueue('q1')\n        .withOnFinishPayload('payload1')\n        .withAgentEmail('email1')\n        .withCaseInfo('{}{:::: m\"ho menjo tot}')\n        .withNote('{}{:::: m\"ho menjo tot2}'),\n    ],\n    [\n      `create_case:` +\n        JSON.stringify({\n          on_finish: '__PATH_PAYLOAD__path1',\n        }),\n      new HandOffBuilder({}).withOnFinishPath('path1'),\n    ],\n    [\n      `create_case:` +\n        JSON.stringify({\n          agent_id: '1234',\n        }),\n      new HandOffBuilder({}).withAgentId('1234'),\n    ],\n  ])('HandOffBuilder', (expected, builder) => {\n    builder.handOff()\n    expect(builder._session._botonic_action).toEqual(expected)\n  })\n})\n"],"file":"handoff.test.js"}