"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadPlugins = loadPlugins;
exports.runPlugins = runPlugins;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function loadPlugins(plugins) {
  if (!plugins) return [];
  var _plugins = {};
  var pluginsLength = plugins.length;

  for (var i = 0; i < pluginsLength; i++) {
    var pluginRequired = plugins[i].resolve;
    var options = plugins[i].options;
    var Plugin = pluginRequired["default"];
    var instance = new Plugin(options);
    var id = plugins[i].id || "".concat(instance.constructor.name);
    _plugins[id] = instance;
    _plugins[id].id = id;
    _plugins[id].config = options;
    _plugins[id].name = "".concat(instance.constructor.name);
  }

  return _plugins;
}

function runPlugins(_x, _x2, _x3, _x4, _x5) {
  return _runPlugins.apply(this, arguments);
}

function _runPlugins() {
  _runPlugins = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(plugins, mode, input, session, lastRoutePath) {
    var response,
        key,
        p,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            response = _args.length > 5 && _args[5] !== undefined ? _args[5] : null;
            _context.t0 = _regenerator["default"].keys(plugins);

          case 2:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 21;
              break;
            }

            key = _context.t1.value;
            _context.next = 6;
            return plugins[key];

          case 6:
            p = _context.sent;
            _context.prev = 7;

            if (!(mode == 'pre')) {
              _context.next = 11;
              break;
            }

            _context.next = 11;
            return p.pre({
              input: input,
              session: session,
              lastRoutePath: lastRoutePath
            });

          case 11:
            if (!(mode == 'post')) {
              _context.next = 14;
              break;
            }

            _context.next = 14;
            return p.post({
              input: input,
              session: session,
              lastRoutePath: lastRoutePath,
              response: response
            });

          case 14:
            _context.next = 19;
            break;

          case 16:
            _context.prev = 16;
            _context.t2 = _context["catch"](7);
            console.log(_context.t2);

          case 19:
            _context.next = 2;
            break;

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 16]]);
  }));
  return _runPlugins.apply(this, arguments);
}
//# sourceMappingURL=plugins.js.map