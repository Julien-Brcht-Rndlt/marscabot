"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CoreBot = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inspector = require("./debug/inspector");

var _i18n = require("./i18n");

var _plugins = require("./plugins");

var _router = require("./router");

var _utils = require("./utils");

var CoreBot = /*#__PURE__*/function () {
  function CoreBot(_ref) {
    var renderer = _ref.renderer,
        routes = _ref.routes,
        locales = _ref.locales,
        theme = _ref.theme,
        plugins = _ref.plugins,
        appId = _ref.appId,
        defaultTyping = _ref.defaultTyping,
        defaultDelay = _ref.defaultDelay,
        defaultRoutes = _ref.defaultRoutes,
        inspector = _ref.inspector;
    (0, _classCallCheck2["default"])(this, CoreBot);
    this.renderer = renderer;
    this.plugins = (0, _plugins.loadPlugins)(plugins);
    this.theme = theme || {};
    this.defaultTyping = typeof defaultTyping !== 'undefined' ? defaultTyping : 0.6;
    this.defaultDelay = typeof defaultDelay !== 'undefined' ? defaultDelay : 0.4;
    this.locales = locales;

    if (appId) {
      this.appId = appId;
      return;
    }

    this.rootElement = null;
    this.inspector = inspector || new _inspector.Inspector();
    this.routes = routes;
    this.defaultRoutes = defaultRoutes || [];
    this.router = (0, _utils.isFunction)(this.routes) ? null : new _router.Router([].concat((0, _toConsumableArray2["default"])(this.routes), (0, _toConsumableArray2["default"])(this.defaultRoutes)), this.inspector.routeInspector);
  }

  (0, _createClass2["default"])(CoreBot, [{
    key: "getString",
    value: function getString(stringID, session) {
      return (0, _i18n.getString)(this.locales, session.__locale, stringID);
    }
  }, {
    key: "setLocale",
    value: function setLocale(locale, session) {
      session.__locale = locale;
    }
  }, {
    key: "input",
    value: function () {
      var _input2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref2) {
        var _this = this;

        var _input, session, lastRoutePath, output, request, actions, response;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _input = _ref2.input, session = _ref2.session, lastRoutePath = _ref2.lastRoutePath;
                session = session || {};
                if (!session.__locale) session.__locale = 'en';

                if (!this.plugins) {
                  _context.next = 6;
                  break;
                }

                _context.next = 6;
                return (0, _plugins.runPlugins)(this.plugins, 'pre', _input, session, lastRoutePath);

              case 6:
                if (!(0, _utils.isFunction)(this.routes)) {
                  _context.next = 18;
                  break;
                }

                _context.t0 = _router.Router;
                _context.t1 = [];
                _context.t2 = _toConsumableArray2["default"];
                _context.next = 12;
                return this.routes({
                  input: _input,
                  session: session,
                  lastRoutePath: lastRoutePath
                });

              case 12:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t2)(_context.t3);
                _context.t5 = (0, _toConsumableArray2["default"])(this.defaultRoutes);
                _context.t6 = _context.t1.concat.call(_context.t1, _context.t4, _context.t5);
                _context.t7 = this.inspector.routeInspector;
                this.router = new _context.t0(_context.t6, _context.t7);

              case 18:
                output = this.router.processInput(_input, session, lastRoutePath);
                request = {
                  getString: function getString(stringId) {
                    return _this.getString(stringId, session);
                  },
                  setLocale: function setLocale(locale) {
                    return _this.setLocale(locale, session);
                  },
                  session: session || {},
                  params: output.params || {},
                  input: _input,
                  plugins: this.plugins,
                  defaultTyping: this.defaultTyping,
                  defaultDelay: this.defaultDelay,
                  lastRoutePath: lastRoutePath
                };
                actions = [output.action, output.retryAction, output.defaultAction];
                _context.next = 23;
                return this.renderer({
                  request: request,
                  actions: actions
                });

              case 23:
                response = _context.sent;
                lastRoutePath = output.lastRoutePath;

                if (!this.plugins) {
                  _context.next = 28;
                  break;
                }

                _context.next = 28;
                return (0, _plugins.runPlugins)(this.plugins, 'post', _input, session, lastRoutePath, response);

              case 28:
                session.is_first_interaction = false;
                return _context.abrupt("return", {
                  input: _input,
                  response: response,
                  session: session,
                  lastRoutePath: lastRoutePath
                });

              case 30:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function input(_x) {
        return _input2.apply(this, arguments);
      }

      return input;
    }()
  }]);
  return CoreBot;
}();

exports.CoreBot = CoreBot;
//# sourceMappingURL=core-bot.js.map