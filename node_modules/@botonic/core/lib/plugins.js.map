{"version":3,"sources":["../src/plugins.js"],"names":["loadPlugins","plugins","_plugins","pluginsLength","length","i","pluginRequired","resolve","options","Plugin","instance","id","constructor","name","config","runPlugins","mode","input","session","lastRoutePath","response","key","p","pre","post","console","log"],"mappings":";;;;;;;;;;;;;;AAAO,SAASA,WAAT,CAAqBC,OAArB,EAA8B;AACnC,MAAI,CAACA,OAAL,EAAc,OAAO,EAAP;AACd,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,aAAa,GAAGF,OAAO,CAACG,MAA9B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAApB,EAAmCE,CAAC,EAApC,EAAwC;AACtC,QAAMC,cAAc,GAAGL,OAAO,CAACI,CAAD,CAAP,CAAWE,OAAlC;AACA,QAAMC,OAAO,GAAGP,OAAO,CAACI,CAAD,CAAP,CAAWG,OAA3B;AACA,QAAMC,MAAM,GAAGH,cAAc,WAA7B;AACA,QAAMI,QAAQ,GAAG,IAAID,MAAJ,CAAWD,OAAX,CAAjB;AACA,QAAMG,EAAE,GAAGV,OAAO,CAACI,CAAD,CAAP,CAAWM,EAAX,cAAoBD,QAAQ,CAACE,WAAT,CAAqBC,IAAzC,CAAX;AACAX,IAAAA,QAAQ,CAACS,EAAD,CAAR,GAAeD,QAAf;AACAR,IAAAA,QAAQ,CAACS,EAAD,CAAR,CAAaA,EAAb,GAAkBA,EAAlB;AACAT,IAAAA,QAAQ,CAACS,EAAD,CAAR,CAAaG,MAAb,GAAsBN,OAAtB;AACAN,IAAAA,QAAQ,CAACS,EAAD,CAAR,CAAaE,IAAb,aAAuBH,QAAQ,CAACE,WAAT,CAAqBC,IAA5C;AACD;;AACD,SAAOX,QAAP;AACD;;SAEqBa,U;;;;;8FAAf,iBACLd,OADK,EAELe,IAFK,EAGLC,KAHK,EAILC,OAJK,EAKLC,aALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMLC,YAAAA,QANK,2DAMM,IANN;AAAA,uDAQanB,OARb;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQMoB,YAAAA,GARN;AAAA;AAAA,mBASapB,OAAO,CAACoB,GAAD,CATpB;;AAAA;AASGC,YAAAA,CATH;AAAA;;AAAA,kBAWGN,IAAI,IAAI,KAXX;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAWwBM,CAAC,CAACC,GAAF,CAAM;AAAEN,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,OAAO,EAAPA,OAAT;AAAkBC,cAAAA,aAAa,EAAbA;AAAlB,aAAN,CAXxB;;AAAA;AAAA,kBAYGH,IAAI,IAAI,MAZX;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaOM,CAAC,CAACE,IAAF,CAAO;AAAEP,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,OAAO,EAAPA,OAAT;AAAkBC,cAAAA,aAAa,EAAbA,aAAlB;AAAiCC,cAAAA,QAAQ,EAARA;AAAjC,aAAP,CAbP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeDK,YAAAA,OAAO,CAACC,GAAR;;AAfC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["export function loadPlugins(plugins) {\n  if (!plugins) return []\n  const _plugins = {}\n  const pluginsLength = plugins.length\n  for (let i = 0; i < pluginsLength; i++) {\n    const pluginRequired = plugins[i].resolve\n    const options = plugins[i].options\n    const Plugin = pluginRequired.default\n    const instance = new Plugin(options)\n    const id = plugins[i].id || `${instance.constructor.name}`\n    _plugins[id] = instance\n    _plugins[id].id = id\n    _plugins[id].config = options\n    _plugins[id].name = `${instance.constructor.name}`\n  }\n  return _plugins\n}\n\nexport async function runPlugins(\n  plugins,\n  mode,\n  input,\n  session,\n  lastRoutePath,\n  response = null\n) {\n  for (const key in plugins) {\n    const p = await plugins[key]\n    try {\n      if (mode == 'pre') await p.pre({ input, session, lastRoutePath })\n      if (mode == 'post')\n        await p.post({ input, session, lastRoutePath, response })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n}\n"],"file":"plugins.js"}