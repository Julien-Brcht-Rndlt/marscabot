"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HubtypeService = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _axios = _interopRequireDefault(require("axios"));

var _pusherJs = _interopRequireDefault(require("pusher-js"));

var _utils = require("./utils");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _WEBCHAT_PUSHER_KEY_ = (0, _utils.getWebpackEnvVar)( // eslint-disable-next-line no-undef
typeof WEBCHAT_PUSHER_KEY !== 'undefined' && WEBCHAT_PUSHER_KEY, 'WEBCHAT_PUSHER_KEY', '434ca667c8e6cb3f641c');

var _HUBTYPE_API_URL_ = (0, _utils.getWebpackEnvVar)( // eslint-disable-next-line no-undef
typeof HUBTYPE_API_URL !== 'undefined' && HUBTYPE_API_URL, 'HUBTYPE_API_URL', 'https://api.hubtype.com');

var ACTIVITY_TIMEOUT = 20 * 1000; // https://pusher.com/docs/channels/using_channels/connection#activitytimeout-integer-

var PONG_TIMEOUT = 5 * 1000; // https://pusher.com/docs/channels/using_channels/connection#pongtimeout-integer-

var HubtypeService = /*#__PURE__*/function () {
  function HubtypeService(_ref) {
    var appId = _ref.appId,
        user = _ref.user,
        lastMessageId = _ref.lastMessageId,
        lastMessageUpdateDate = _ref.lastMessageUpdateDate,
        onEvent = _ref.onEvent,
        unsentInputs = _ref.unsentInputs,
        server = _ref.server;
    (0, _classCallCheck2["default"])(this, HubtypeService);
    this.appId = appId;
    this.user = user || {};
    this.lastMessageId = lastMessageId;
    this.lastMessageUpdateDate = lastMessageUpdateDate;
    this.onEvent = onEvent;
    this.unsentInputs = unsentInputs;
    this.server = server;

    if (user.id && (lastMessageId || lastMessageUpdateDate)) {
      this.init();
    }
  }

  (0, _createClass2["default"])(HubtypeService, [{
    key: "resolveServerConfig",
    value: function resolveServerConfig() {
      if (!this.server) {
        return {
          activityTimeout: ACTIVITY_TIMEOUT,
          pongTimeout: PONG_TIMEOUT
        };
      }

      return {
        activityTimeout: this.server.activityTimeout || ACTIVITY_TIMEOUT,
        pongTimeout: this.server.pongTimeout || PONG_TIMEOUT
      };
    }
  }, {
    key: "updateAuthHeaders",
    value: function updateAuthHeaders() {
      if (this.pusher) {
        this.pusher.config.auth.headers = _objectSpread(_objectSpread({}, this.pusher.config.auth.headers), this.constructHeaders());
      }
    }
  }, {
    key: "init",
    value: function init(user, lastMessageId, lastMessageUpdateDate) {
      var _this = this;

      if (user) this.user = user;
      if (lastMessageId) this.lastMessageId = lastMessageId;
      if (lastMessageUpdateDate) this.lastMessageUpdateDate = lastMessageUpdateDate;
      if (this.pusher || !this.user.id || !this.appId) return null;
      this.pusher = new _pusherJs["default"](_WEBCHAT_PUSHER_KEY_, _objectSpread({
        cluster: 'eu',
        authEndpoint: "".concat(_HUBTYPE_API_URL_, "/v1/provider_accounts/webhooks/webchat/").concat(this.appId, "/auth/"),
        forceTLS: true,
        auth: {
          headers: this.constructHeaders()
        }
      }, this.resolveServerConfig()));
      this.channel = this.pusher.subscribe(this.pusherChannel);
      var connectionPromise = new Promise(function (resolve, reject) {
        var cleanAndReject = function cleanAndReject(msg) {
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          clearTimeout(connectTimeout);

          _this.destroyPusher();

          reject(msg);
        };

        var connectTimeout = setTimeout(function () {
          return cleanAndReject('Connection Timeout');
        }, 10000);

        _this.channel.bind('pusher:subscription_succeeded', function () {
          // Once subscribed, we know that authentication has been done: https://pusher.com/docs/channels/server_api/authenticating-users
          _this.onConnectionRegained();

          clearTimeout(connectTimeout);
          resolve();
        });

        _this.channel.bind('botonic_response', function (data) {
          return _this.onPusherEvent(data);
        });

        _this.channel.bind('update_message_info', function (data) {
          return _this.onPusherEvent(data);
        });

        _this.pusher.connection.bind('error', function (event) {
          if (event.type == 'WebSocketError') _this.handleConnectionChange(false);else {
            var errorMsg = event.error && event.error.data ? event.error.data.code || event.error.data.message : 'Connection error';
            cleanAndReject("Pusher error (".concat(errorMsg, ")"));
          }
        });
      });
      this.pusher.connection.bind('state_change', function (states) {
        if (states.current === 'connecting') _this.updateAuthHeaders();
        if (states.current === 'connected') _this.handleConnectionChange(true);
        if (states.current === 'unavailable') _this.handleConnectionChange(false);
      });
      return connectionPromise;
    }
  }, {
    key: "constructHeaders",
    value: function constructHeaders() {
      var headers = {};
      if (this.user && this.user.id) headers['X-BOTONIC-USER-ID'] = this.user.id;
      if (this.lastMessageId) headers['X-BOTONIC-LAST-MESSAGE-ID'] = this.lastMessageId;
      if (this.lastMessageUpdateDate) headers['X-BOTONIC-LAST-MESSAGE-UPDATE-DATE'] = this.lastMessageUpdateDate;
      return headers;
    }
  }, {
    key: "handleConnectionChange",
    value: function handleConnectionChange(online) {
      this.onPusherEvent({
        action: 'connectionChange',
        online: online
      });
    }
  }, {
    key: "onPusherEvent",
    value: function onPusherEvent(event) {
      if (this.onEvent && typeof this.onEvent === 'function') this.onEvent(event);
    }
  }, {
    key: "pusherChannel",
    get: function get() {
      return "private-encrypted-".concat(this.appId, "-").concat(this.user.id);
    }
  }, {
    key: "handleSentInput",
    value: function handleSentInput(message) {
      this.onEvent({
        action: 'update_message_info',
        message: {
          id: message.id,
          ack: 1
        }
      });
    }
  }, {
    key: "handleUnsentInput",
    value: function handleUnsentInput(message) {
      this.onEvent({
        action: 'update_message_info',
        message: {
          id: message.id,
          ack: 0,
          unsentInput: message
        }
      });
    }
  }, {
    key: "postMessage",
    value: function () {
      var _postMessage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(user, message) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this.init(user);

              case 3:
                _context.next = 5;
                return _axios["default"].post("".concat(_HUBTYPE_API_URL_, "/v1/provider_accounts/webhooks/webchat/").concat(this.appId, "/"), {
                  sender: this.user,
                  message: message
                }, {
                  validateStatus: function validateStatus(status) {
                    return status === 200;
                  }
                });

              case 5:
                this.handleSentInput(message);
                _context.next = 11;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                this.handleUnsentInput(message);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 8]]);
      }));

      function postMessage(_x, _x2) {
        return _postMessage.apply(this, arguments);
      }

      return postMessage;
    }()
  }, {
    key: "destroyPusher",
    value: function destroyPusher() {
      if (!this.pusher) return;
      this.pusher.disconnect();
      this.pusher.unsubscribe(this.pusherChannel);
      this.pusher.unbind_all();
      this.pusher.channels = {};
      this.pusher = null;
    }
  }, {
    key: "onConnectionRegained",
    value: function () {
      var _onConnectionRegained = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.resendUnsentInputs();

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function onConnectionRegained() {
        return _onConnectionRegained.apply(this, arguments);
      }

      return onConnectionRegained;
    }()
  }, {
    key: "resendUnsentInputs",
    value: function () {
      var _resendUnsentInputs = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var _iterator, _step, message;

        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _iterator = _createForOfIteratorHelper(this.unsentInputs());
                _context3.prev = 1;

                _iterator.s();

              case 3:
                if ((_step = _iterator.n()).done) {
                  _context3.next = 11;
                  break;
                }

                message = _step.value;
                _context3.t0 = message.unsentInput;

                if (!_context3.t0) {
                  _context3.next = 9;
                  break;
                }

                _context3.next = 9;
                return this.postMessage(this.user, message.unsentInput);

              case 9:
                _context3.next = 3;
                break;

              case 11:
                _context3.next = 16;
                break;

              case 13:
                _context3.prev = 13;
                _context3.t1 = _context3["catch"](1);

                _iterator.e(_context3.t1);

              case 16:
                _context3.prev = 16;

                _iterator.f();

                return _context3.finish(16);

              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[1, 13, 16, 19]]);
      }));

      function resendUnsentInputs() {
        return _resendUnsentInputs.apply(this, arguments);
      }

      return resendUnsentInputs;
    }()
  }], [{
    key: "getWebchatVisibility",
    value: function () {
      var _getWebchatVisibility = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(_ref2) {
        var appId;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                appId = _ref2.appId;
                return _context4.abrupt("return", _axios["default"].get("".concat(_HUBTYPE_API_URL_, "/v1/provider_accounts/").concat(appId, "/visibility/")));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function getWebchatVisibility(_x3) {
        return _getWebchatVisibility.apply(this, arguments);
      }

      return getWebchatVisibility;
    }()
  }]);
  return HubtypeService;
}();

exports.HubtypeService = HubtypeService;
//# sourceMappingURL=hubtype-service.js.map