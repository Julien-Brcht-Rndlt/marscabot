"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Inspector = exports.LogRouteInspector = exports.FocusRouteInspector = exports.RouteInspector = void 0;

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var RouteInspector = /*#__PURE__*/function () {
  function RouteInspector() {
    (0, _classCallCheck2["default"])(this, RouteInspector);
  }

  (0, _createClass2["default"])(RouteInspector, [{
    key: "routeMatched",
    value: function routeMatched(route, routeKey, routeValue, input) {}
  }, {
    key: "routeNotMatched",
    value: function routeNotMatched(route, routeKey, routeValue, inputValue) {}
  }]);
  return RouteInspector;
}();

exports.RouteInspector = RouteInspector;

var FocusRouteInspector = /*#__PURE__*/function (_RouteInspector) {
  (0, _inherits2["default"])(FocusRouteInspector, _RouteInspector);

  var _super = _createSuper(FocusRouteInspector);

  function FocusRouteInspector() {
    var _this;

    (0, _classCallCheck2["default"])(this, FocusRouteInspector);
    _this = _super.call(this);
    _this.focusRoutePaths = null;
    _this.focusOnMatches = false;
    return _this;
  }

  (0, _createClass2["default"])(FocusRouteInspector, [{
    key: "focusOnlyOnRoutes",
    value: function focusOnlyOnRoutes(focusRoutePaths) {
      this.focusRoutePaths = focusRoutePaths;
      return this;
    }
  }, {
    key: "focusOnlyOnMatches",
    value: function focusOnlyOnMatches() {
      this.focusOnMatches = true;
      return this;
    }
  }, {
    key: "_isOnFocus",
    value: function _isOnFocus(route) {
      if (this.focusRoutePaths == null) {
        return true;
      }

      return this.focusRoutePaths.includes(route.path);
    }
  }]);
  return FocusRouteInspector;
}(RouteInspector);

exports.FocusRouteInspector = FocusRouteInspector;

var LogRouteInspector = /*#__PURE__*/function (_FocusRouteInspector) {
  (0, _inherits2["default"])(LogRouteInspector, _FocusRouteInspector);

  var _super2 = _createSuper(LogRouteInspector);

  function LogRouteInspector() {
    (0, _classCallCheck2["default"])(this, LogRouteInspector);
    return _super2.apply(this, arguments);
  }

  (0, _createClass2["default"])(LogRouteInspector, [{
    key: "routeMatched",
    value: function routeMatched(route, routeKey, routeValue, inputValue) {
      if (!this._isOnFocus(route)) {
        return;
      }

      this._log("Route ".concat(this._routeName(route), " selected ") + "because Input.".concat(routeKey, " (").concat(inputValue, ") matched '").concat(routeValue, "'"));
    }
  }, {
    key: "routeNotMatched",
    value: function routeNotMatched(route, routeKey, routeValue, inputValue) {
      if (!this._isOnFocus(route) || this.focusOnMatches) {
        return;
      }

      this._log("Route ".concat(this._routeName(route), " not selected ") + "because Input.".concat(routeKey, " (").concat(inputValue, ") did not match '").concat(routeValue, "'"));
    }
  }, {
    key: "_routeName",
    value: function _routeName(obj) {
      var name = obj.path || '<<no path defined>>';

      if (obj.action) {
        name = "'".concat(name, "' (to action '").concat(obj.action.name, "')");
      }

      if (obj.redirect) {
        name = "'".concat(name, "' (with redirect to '").concat(obj.redirect, "')");
      }

      return name;
    }
  }, {
    key: "_log",
    value: function _log(message) {
      var _console;

      for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        optionalParams[_key - 1] = arguments[_key];
      }

      (_console = console).log.apply(_console, [message].concat(optionalParams));
    }
  }]);
  return LogRouteInspector;
}(FocusRouteInspector);

exports.LogRouteInspector = LogRouteInspector;

var Inspector = /*#__PURE__*/function () {
  function Inspector() {
    var routeInspector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    (0, _classCallCheck2["default"])(this, Inspector);
    this.routeInspector = routeInspector || new RouteInspector();
  }

  (0, _createClass2["default"])(Inspector, [{
    key: "getRouteInspector",
    value: function getRouteInspector() {
      return this.routeInspector;
    }
  }]);
  return Inspector;
}();

exports.Inspector = Inspector;
//# sourceMappingURL=inspector.js.map