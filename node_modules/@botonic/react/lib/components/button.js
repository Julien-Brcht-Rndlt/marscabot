"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _core = require("@botonic/core");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../constants");

var _contexts = require("../contexts");

var _react2 = require("../util/react");

var _buttonsDisabler = require("./buttons-disabler");

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var StyledButton = _styledComponents["default"].button(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  width: 100%;\n  max-height: 80px;\n  font-size: 14px;\n  text-align: center;\n  align-content: center;\n  justify-content: center;\n  padding: 12px 32px;\n  font-family: inherit;\n  border: none;\n  border: 1px solid ", ";\n  cursor: pointer;\n  outline: 0;\n  border-top-right-radius: ", ";\n  border-top-left-radius: ", ";\n  border-bottom-right-radius: ", ";\n  border-bottom-left-radius: ", ";\n  overflow: hidden;\n"])), _constants.COLORS.SEASHELL_WHITE, function (props) {
  return props.top || '0px';
}, function (props) {
  return props.top || '0px';
}, function (props) {
  return props.bottom || '0px';
}, function (props) {
  return props.bottom || '0px';
});

var Button = function Button(props) {
  var _useContext = (0, _react.useContext)(_contexts.WebchatContext),
      webchatState = _useContext.webchatState,
      openWebview = _useContext.openWebview,
      sendPayload = _useContext.sendPayload,
      sendInput = _useContext.sendInput,
      getThemeProperty = _useContext.getThemeProperty,
      updateMessage = _useContext.updateMessage;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      hover = _useState2[0],
      setHover = _useState2[1];

  var theme = webchatState.theme;

  var _ButtonsDisabler$reso = _buttonsDisabler.ButtonsDisabler.resolveDisabling(webchatState.theme, props),
      autoDisable = _ButtonsDisabler$reso.autoDisable,
      disabledStyle = _ButtonsDisabler$reso.disabledStyle;

  var handleClick = function handleClick(event) {
    event.preventDefault();
    var type = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.buttonMessageType, _core.INPUT.TEXT);
    if (props.webview) openWebview(props.webview, props.params);else if (props.path) {
      type == _core.INPUT.POSTBACK ? sendPayload("__PATH_PAYLOAD__".concat(props.path)) : sendInput({
        type: _core.INPUT.TEXT,
        data: String(props.children),
        payload: "__PATH_PAYLOAD__".concat(props.path)
      });
    } else if (props.payload) {
      type == _core.INPUT.POSTBACK ? sendPayload(props.payload) : sendInput({
        type: _core.INPUT.TEXT,
        data: String(props.children),
        payload: props.payload
      });
    } else if (props.url) {
      window.open(props.url, props.target || '_blank');
    }
    if (props.onClick) props.onClick();

    if (props.setDisabled) {
      props.setDisabled(true);
      var messageToUpdate = webchatState.messagesJSON.filter(function (m) {
        return m.id == props.parentId;
      })[0];

      var updatedMsg = _buttonsDisabler.ButtonsDisabler.getUpdatedMessage(messageToUpdate, {
        autoDisable: autoDisable,
        disabledStyle: disabledStyle
      });

      updateMessage(updatedMsg);
    }
  };

  var renderBrowser = function renderBrowser() {
    var buttonStyle = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.buttonStyle);
    var CustomButton = getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.customButton);

    if (CustomButton) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        onClick: function onClick(e) {
          return handleClick(e);
        }
      }, /*#__PURE__*/_react["default"].createElement(CustomButton, null, props.children));
    }

    var buttonBgColor = hover ? getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.buttonHoverBackground, _constants.COLORS.CONCRETE_WHITE) : getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.buttonStyleBackground, _constants.COLORS.SOLID_WHITE);
    var buttonTextColor = hover ? getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.buttonHoverTextColor, _constants.COLORS.SOLID_BLACK) : getThemeProperty(_constants.WEBCHAT.CUSTOM_PROPERTIES.buttonStyleColor, _constants.COLORS.SOLID_BLACK);
    return /*#__PURE__*/_react["default"].createElement(StyledButton, {
      theme: theme,
      onMouseEnter: function onMouseEnter() {
        return setHover(true);
      },
      onMouseLeave: function onMouseLeave() {
        return setHover(false);
      },
      onClick: function onClick(e) {
        return handleClick(e);
      },
      style: _objectSpread(_objectSpread({}, buttonStyle), {}, {
        color: buttonTextColor,
        backgroundColor: buttonBgColor
      }, props.disabled && autoDisable && disabledStyle),
      bottom: props.bottomRadius
    }, props.children);
  };

  var renderNode = function renderNode() {
    var disabledProps = _buttonsDisabler.ButtonsDisabler.constructNodeProps(props);

    if (props.webview) {
      var Webview = props.webview;
      var params = '';
      if (props.params) params = (0, _core.params2queryString)(props.params);
      return /*#__PURE__*/_react["default"].createElement("button", (0, _extends2["default"])({
        url: "/webviews/".concat(Webview.name, "?").concat(params)
      }, disabledProps), props.children);
    } else if (props.path) {
      var payload = "__PATH_PAYLOAD__".concat(props.path);
      return /*#__PURE__*/_react["default"].createElement("button", (0, _extends2["default"])({
        payload: payload
      }, disabledProps), props.children);
    } else if (props.payload) {
      return /*#__PURE__*/_react["default"].createElement("button", (0, _extends2["default"])({
        payload: props.payload
      }, disabledProps), props.children);
    } else if (props.url) {
      return /*#__PURE__*/_react["default"].createElement("button", (0, _extends2["default"])({
        url: props.url,
        target: props.target
      }, disabledProps), props.children);
    } else if (props.onClick) {
      return null;
    }

    throw new Error('Button missing payload, path, webviews, url or onClick');
  };

  return (0, _react2.renderComponent)({
    renderBrowser: renderBrowser,
    renderNode: renderNode
  });
};

exports.Button = Button;

Button.serialize = function (buttonProps) {
  var payload = buttonProps.payload;
  if (buttonProps.path) payload = "__PATH_PAYLOAD__".concat(buttonProps.path);
  return {
    button: _objectSpread({
      payload: payload,
      url: buttonProps.url,
      target: buttonProps.target,
      webview: buttonProps.webview && String(buttonProps.webview),
      title: buttonProps.children && String(buttonProps.children)
    }, _buttonsDisabler.ButtonsDisabler.withDisabledProps(buttonProps))
  };
};
//# sourceMappingURL=button.js.map