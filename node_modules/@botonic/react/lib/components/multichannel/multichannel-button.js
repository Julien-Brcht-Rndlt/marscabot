"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultichannelButton = void 0;

var _react = _interopRequireWildcard(require("react"));

var _contexts = require("../../contexts");

var _button = require("../button");

var _multichannelContext = require("./multichannel-context");

var _multichannelUtils = require("./multichannel-utils");

var MultichannelButton = function MultichannelButton(props) {
  var requestContext = (0, _react.useContext)(_contexts.RequestContext);
  var multichannelContext = (0, _react.useContext)(_multichannelContext.MultichannelContext);

  var hasUrl = function hasUrl() {
    return Boolean(props.url);
  };

  var hasPath = function hasPath() {
    return Boolean(props.path);
  };

  var hasPayload = function hasPayload() {
    return Boolean(props.payload);
  };

  var hasPostback = function hasPostback() {
    return hasPath() || hasPayload();
  };

  var hasWebview = function hasWebview() {
    return Boolean(props.webview);
  };

  var getUrl = function getUrl() {
    return props.url;
  };

  var getWebview = function getWebview() {
    return props.webview;
  };

  var increaseCurrentIndex = function increaseCurrentIndex() {
    if (typeof multichannelContext.currentIndex === 'number') {
      multichannelContext.currentIndex += 1;
    } else if (typeof multichannelContext.currentIndex === 'string') {
      var lastChar = multichannelContext.currentIndex.charCodeAt(multichannelContext.currentIndex.length - 1);
      multichannelContext.currentIndex = String.fromCharCode(lastChar + 1);
    }
  };

  var formatIndex = function formatIndex(index) {
    var boldIndex = multichannelContext.boldIndex == null ? false : multichannelContext.boldIndex;
    return boldIndex ? "*".concat(index, "*") : index;
  };

  var getText = function getText() {
    var text = props.children;
    var newline = props.newline || '';
    var separator = multichannelContext.indexSeparator || ' ';
    var index = multichannelContext.currentIndex ? "".concat(formatIndex(multichannelContext.currentIndex + separator), " ") : '';

    if (hasPostback()) {
      text = newline + "".concat(index).concat(text);
    } else if (hasUrl()) {
      text = newline + "- ".concat(text);
    }

    return text;
  };

  if ((0, _multichannelUtils.isWhatsapp)(requestContext)) {
    if (hasUrl()) {
      return "".concat(getText(), ": ").concat(getUrl());
    } else if (hasPath() || hasPayload()) {
      var text = getText();
      increaseCurrentIndex();
      return "".concat(text);
    } else if (hasWebview()) return /*#__PURE__*/_react["default"].createElement(_button.Button, props, getText());else return /*#__PURE__*/_react["default"].createElement(_button.Button, props, props.children);
  }

  return /*#__PURE__*/_react["default"].createElement(_button.Button, props, props.children);
};

exports.MultichannelButton = MultichannelButton;
//# sourceMappingURL=multichannel-button.js.map