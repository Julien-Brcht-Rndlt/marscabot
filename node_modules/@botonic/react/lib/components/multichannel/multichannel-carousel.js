"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultichannelCarousel = void 0;

var _react = _interopRequireWildcard(require("react"));

var _contexts = require("../../contexts");

var _carousel = require("../carousel");

var _multichannelText = require("./multichannel-text");

var _multichannelUtils = require("./multichannel-utils");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var MultichannelCarousel = function MultichannelCarousel(props) {
  var requestContext = (0, _react.useContext)(_contexts.RequestContext);

  var getButtons = function getButtons(node) {
    return [].concat((0, _multichannelUtils.getFilteredElements)(node, _multichannelUtils.isMultichannelButton));
  };

  if ((0, _multichannelUtils.isWhatsapp)(requestContext)) {
    var elementsAsTexts = props.children.map(function (e) {
      return e.props.children;
    }).map(function (element, i) {
      var imageProps = undefined;
      var title = undefined;
      var subtitle = undefined;
      var buttons = [];

      var _iterator = _createForOfIteratorHelper(element),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var node = _step.value;

          if ((0, _multichannelUtils.isNodeKind)(node, 'Pic')) {
            imageProps = node.props;
          }

          if ((0, _multichannelUtils.isNodeKind)(node, 'Title')) {
            title = node.props.children;
          }

          if ((0, _multichannelUtils.isNodeKind)(node, 'Subtitle')) {
            subtitle = node.props.children;
          }

          if ((0, _multichannelUtils.isNodeKind)(node, 'MultichannelButton')) {
            buttons.push(node);
          } //TODO support fragment containing an array


          if (Array.isArray(node)) {
            buttons.push(getButtons(node));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var header = '';

      if (props.showTitle && title) {
        header += "".concat(title ? "*".concat(title, "*") : '');

        if (title && subtitle) {
          header += ' ';
        }
      }

      if (props.showSubtitle && subtitle) {
        header += "_".concat(subtitle, "_");
      }

      return (
        /*#__PURE__*/
        // TODO: newkey only for 1 nested button
        _react["default"].createElement(_multichannelText.MultichannelText, {
          key: i,
          newkey: i,
          indexMode: props.indexMode
        }, header || null, buttons)
      ); // TODO: in the future, this would be the default mode
      // } else {
      // return (
      //   <React.Fragment key={i}>
      //     <Image
      //       src={imageSrc}
      //       caption={carouselToCaption(
      //         i + 1,
      //         title,
      //         subtitle,
      //         imageSrc,
      //         buttonProps
      //       )}
      //     ></Image>
      //   </React.Fragment>
      // )
      // }
    });
    return elementsAsTexts;
  } else {
    return /*#__PURE__*/_react["default"].createElement(_carousel.Carousel, props, props.children);
  }
}; // const carouselToCaption = (index, title, subtitle, imageSrc, buttonProps) => {
//   let caption = ''
//   let header = `${title ? `*${title}*` : ''}`
//   header += `${subtitle ? ` - _${subtitle}_` : ''}`
//   let buttons = ''
//   if (buttonProps.url) {
//     buttons += ` - ${buttonProps.children}: ${buttonProps.url}`
//     caption = `${header ? `${header}\n` : ''}${buttons}`
//   }
//   if (buttonProps.payload || buttonProps.path) {
//     buttons += `${index}. `
//     caption = `${buttons}${buttonProps.children}`
//   }
//   return caption
// }


exports.MultichannelCarousel = MultichannelCarousel;
//# sourceMappingURL=multichannel-carousel.js.map