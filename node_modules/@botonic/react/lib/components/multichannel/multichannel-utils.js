"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMultichannelButton = isMultichannelButton;
exports.isMultichannelReply = isMultichannelReply;
exports.isButton = isButton;
exports.isNodeKind = isNodeKind;
exports.elementHasUrl = elementHasUrl;
exports.elementHasPostback = elementHasPostback;
exports.getFilteredElements = getFilteredElements;
exports.getMultichannelButtons = getMultichannelButtons;
exports.getMultichannelReplies = getMultichannelReplies;
exports.isFacebook = exports.isWhatsapp = exports.MULTICHANNEL_WHATSAPP_PROPS = void 0;

var _core = require("@botonic/core");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 *
 * Whatsapp does not support Markdown
 * (its markup syntax is different)
 */
var MULTICHANNEL_WHATSAPP_PROPS = {
  markdown: false
};
exports.MULTICHANNEL_WHATSAPP_PROPS = MULTICHANNEL_WHATSAPP_PROPS;

function isMultichannelButton(node) {
  return isNodeKind(node, 'MultichannelButton');
}

function isMultichannelReply(node) {
  return isNodeKind(node, 'MultichannelReply');
}

function isButton(node) {
  return isNodeKind(node, 'Button');
}

function isNodeKind(node, kind) {
  return node.type && node.type.name == kind;
}

function elementHasUrl(element) {
  return element.props && element.props.url;
}

function elementHasPostback(element) {
  return element.props && element.props.payload || element.props && element.props.path;
}

function getFilteredElements(node, filter) {
  var elements = [];

  var _iterator = _createForOfIteratorHelper(node),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var n = _step.value;
      if (filter(n)) elements.push(n);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return elements;
}

function getMultichannelButtons(node) {
  return getFilteredElements(node, isMultichannelButton);
}

function getMultichannelReplies(node) {
  return getFilteredElements(node, isMultichannelReply);
}

var isWhatsapp = function isWhatsapp(context) {
  return context.session && context.session.user && context.session.user.provider == _core.Providers.Messaging.WHATSAPP;
};

exports.isWhatsapp = isWhatsapp;

var isFacebook = function isFacebook(context) {
  return context.session && context.session.user && context.session.user.provider == _core.Providers.Messaging.FACEBOOK;
};

exports.isFacebook = isFacebook;
//# sourceMappingURL=multichannel-utils.js.map