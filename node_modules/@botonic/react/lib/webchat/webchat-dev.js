"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebchatDev = exports.DebugTabPortal = exports.DebugTab = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _core = require("@botonic/core");

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _hooks = require("./hooks");

var _sessionView = require("./session-view");

var _webchat = require("./webchat");

var _templateObject;

var DebugTab = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: ", ";\n  height: ", ";\n"])), function (props) {
  return props.show ? '350px' : '32px';
}, function (props) {
  return props.show ? '100%' : '42px';
}); // We want the debug tab to be rendered in the <body> even if the
// webchat is being rendered in a shadowDOM, that's why we need a portal


exports.DebugTab = DebugTab;

var DebugTabPortal = function DebugTabPortal(_ref) {
  var webchatHooks = _ref.webchatHooks,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["webchatHooks"]);
  return /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react["default"].createElement(DebugTab, props, /*#__PURE__*/_react["default"].createElement(_sessionView.SessionView, {
    webchatHooks: webchatHooks
  })), document.body);
};

exports.DebugTabPortal = DebugTabPortal;
var initialSession = {
  is_first_interaction: true,
  last_session: {},
  user: {
    id: '000001',
    username: 'johndoe',
    name: 'John Doe',
    provider: _core.PROVIDER.DEV,
    provider_id: '0000000',
    extra_data: {}
  },
  organization: '',
  bot: {
    id: '0000000',
    name: 'botName'
  }
}; // eslint-disable-next-line react/display-name

var WebchatDev = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var webchatHooks = (0, _hooks.useWebchat)();
  var webchatState = webchatHooks.webchatState,
      updateTheme = webchatHooks.updateTheme;
  /* TODO: webchatState.theme should be included in the dependencies array
  together with props.theme. The problem is that this effect modifies webchatState
  so we enter an infinite rerender loop. */

  (0, _react.useEffect)(function () {
    updateTheme((0, _lodash["default"])(webchatState.theme, props.theme));
  }, [props.theme]);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_webchat.Webchat, (0, _extends2["default"])({
    style: {
      flex: 1,
      position: 'relative'
    }
  }, props, {
    ref: ref,
    webchatHooks: webchatHooks,
    initialSession: initialSession,
    initialDevSettings: {
      keepSessionOnReload: webchatState.devSettings.keepSessionOnReload,
      showSessionView: webchatState.devSettings.showSessionView
    }
  })), /*#__PURE__*/_react["default"].createElement(DebugTabPortal, {
    show: webchatState.devSettings.showSessionView,
    webchatHooks: webchatHooks
  }));
});
exports.WebchatDev = WebchatDev;
//# sourceMappingURL=webchat-dev.js.map